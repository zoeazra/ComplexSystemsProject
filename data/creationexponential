import csv
import random
import datetime
import numpy as np  # Use numpy for generating exponentially distributed values

# Define the file name and the number of rows
output_file = "compatible_exponential_generated.csv"
number_of_rows = 50000  # Adjusted for reasonable size, can be increased as needed

# Define column headers
headers = [
    "CCSDS_OMM_VERS",
    "COMMENT",
    "CREATION_DATE",
    "ORIGINATOR",
    "OBJECT_NAME",
    "OBJECT_ID",
    "CENTER_NAME",
    "REF_FRAME",
    "TIME_SYSTEM",
    "MEAN_ELEMENT_THEORY",
    "EPOCH",
    "MEAN_MOTION",
    "ECCENTRICITY",
    "INCLINATION",
    "RA_OF_ASC_NODE",
    "ARG_OF_PERICENTER",
    "MEAN_ANOMALY",
    "EPHEMERIS_TYPE",
    "CLASSIFICATION_TYPE",
    "NORAD_CAT_ID",
    "ELEMENT_SET_NO",
    "REV_AT_EPOCH",
    "BSTAR",
    "MEAN_MOTION_DOT",
    "MEAN_MOTION_DDOT",
    "SEMIMAJOR_AXIS",
    "PERIOD",
    "APOAPSIS",
    "PERIAPSIS",
    "OBJECT_TYPE",
    "RCS_SIZE",
    "COUNTRY_CODE",
    "LAUNCH_DATE",
    "SITE",
    "DECAY_DATE",
    "FILE",
    "GP_ID",
    "TLE_LINE0",
    "TLE_LINE1",
    "TLE_LINE2",
]

# Generate random data for the rows
def generate_row(index):
    creation_date = datetime.datetime(2021, 11, 1, random.randint(0, 23), random.randint(0, 59), random.randint(0, 59))
    epoch = creation_date - datetime.timedelta(days=random.randint(0, 365))
    
    # Exponential distribution for key parameters
    mean_motion = max(0.1, np.random.exponential(1.5))  # Scale 1.5, clipped to >0
    eccentricity = np.clip(np.random.exponential(0.2), 0.0, 1.0)  # Scale 0.2, clipped to [0, 1]
    inclination = np.clip(np.random.exponential(45.0), 0.0, 180.0)  # Scale 45.0, clipped to [0, 180]
    semi_major_axis = max(6371.0, 6371.0 + np.random.exponential(500.0))  # Base 6371 km + scale 500 km (LEO)

    return [
        "2",  # CCSDS_OMM_VERS
        "GENERATED VIA SPACE-TRACK.ORG API",  # COMMENT
        creation_date.isoformat(),  # CREATION_DATE
        "18 SPCS",  # ORIGINATOR
        f"OBJECT {index}",  # OBJECT_NAME
        f"ID-{index}",  # OBJECT_ID
        "EARTH",  # CENTER_NAME
        "TEME",  # REF_FRAME
        "UTC",  # TIME_SYSTEM
        "SGP4",  # MEAN_ELEMENT_THEORY
        epoch.isoformat(),  # EPOCH
        round(mean_motion, 8),  # MEAN_MOTION
        round(eccentricity, 8),  # ECCENTRICITY
        round(inclination, 4),  # INCLINATION
        round(random.uniform(0.0, 360.0), 4),  # RA_OF_ASC_NODE
        round(random.uniform(0.0, 360.0), 4),  # ARG_OF_PERICENTER
        round(random.uniform(0.0, 360.0), 4),  # MEAN_ANOMALY
        "0",  # EPHEMERIS_TYPE
        "U",  # CLASSIFICATION_TYPE
        random.randint(10000, 99999),  # NORAD_CAT_ID
        random.randint(0, 999),  # ELEMENT_SET_NO
        random.randint(0, 100000),  # REV_AT_EPOCH
        round(random.uniform(0.0, 0.01), 8),  # BSTAR
        round(random.uniform(-0.0001, 0.0001), 8),  # MEAN_MOTION_DOT
        "0",  # MEAN_MOTION_DDOT
        round(semi_major_axis, 3),  # SEMIMAJOR_AXIS
        round(random.uniform(90.0, 1440.0), 3),  # PERIOD
        round(random.uniform(0.0, 35786.0), 3),  # APOAPSIS
        round(random.uniform(0.0, 35786.0), 3),  # PERIAPSIS
        random.choice(["DEBRIS", "PAYLOAD", "ROCKET BODY"]),  # OBJECT_TYPE
        random.choice(["SMALL", "MEDIUM", "LARGE"]),  # RCS_SIZE
        random.choice(["US", "CIS", "FR", "PRC", "IND"]),  # COUNTRY_CODE
        f"{random.randint(1950, 2021)}-{random.randint(1, 12):02d}-{random.randint(1, 28):02d}",  # LAUNCH_DATE
        "SITE",  # SITE
        "",  # DECAY_DATE
        random.randint(1000000, 9999999),  # FILE
        random.randint(100000, 999999),  # GP_ID
        f"0 OBJECT {index}",  # TLE_LINE0
        f"1 {random.randint(10000, 99999)}U {random.randint(10000, 99999)}A   {random.randint(10000, 99999)}",  # TLE_LINE1
        f"2 {random.randint(10000, 99999)} {random.uniform(0.0, 360.0):.4f} {random.uniform(0.0, 360.0):.4f}",  # TLE_LINE2
    ]

# Write the CSV file
with open(output_file, "w", newline="") as file:
    writer = csv.writer(file)
    writer.writerow(headers)
    for i in range(1, number_of_rows + 1):
        writer.writerow(generate_row(i))

print(f"Generated {output_file} with {number_of_rows} rows.")
